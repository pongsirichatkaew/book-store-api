version: '3.8'

services:
  books-iam:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - APP_NAME=books-service
    command: npm run start:dev -- books-iam # This instructs Docker Compose to run the "start:dev" script when starting the container
    env_file:
       - '.env'
    environment:
      # Here we specify the environment variables that will be passed to the container
      - PORT=3000
    deploy:
      replicas: 1 
    ports:
       - 3000:3000
    volumes:
      - ./libs:/usr/src/app/libs
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      # Note: This is usually not a good practice to mount the "node_modules" directory on the host to the container       # We are doing this for the sake of simplicity in this example       - ./node_modules:/usr/src/app/node_modules
      # This instructs Docker Compose to mount the "books-iam" directory on the host to the "/usr/src/app" directory on the container
      # This allows us to make changes to the code on the host and have them reflected in the container without having to rebuild the image
      - ./apps/books-iam:/usr/src/app/apps/books-iam
    depends_on:
      - books-db
      - books-service
      - kibana
      - elasticsearch
  books-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - APP_NAME=books-service
    command: npm run start:dev -- books-service # This instructs Docker Compose to run the "start:dev" script when starting the container
    env_file:
       - '.env'
    environment:
      - PORT=3001
    deploy:
      replicas: 1 # This instructs Docker Compose to start 3 instances of the "books-service" container
    ports:
       - 3001:3001
    volumes:
      - ./libs:/usr/src/app/libs
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      # Note: This is usually not a good practice to mount the "node_modules" directory on the host to the container       # We are doing this for the sake of simplicity in this example       - ./node_modules:/usr/src/app/node_modules
      # This instructs Docker Compose to mount the "books-service" directory on the host to the "/usr/src/app" directory on the container
      # This allows us to make changes to the code on the host and have them reflected in the container without having to rebuild the image
      - ./apps/books-service:/usr/src/app/apps/books-service
    depends_on:
      - books-db
      - kibana
      - elasticsearch
  books-db:
    image: postgres:13.2-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=books
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"  # Elasticsearch HTTP
      - "9300:9300"  # Elasticsearch TCP transport
  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"  # Kibana dashboard
    depends_on:
      - elasticsearch